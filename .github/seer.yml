# Seer by Sentry Configuration
version: 2025.1

# Bot Identity
bot:
  name: seer-by-sentry
  display_name: Seer by Sentry
  icon: ðŸ”®

# Review Settings
review:
  # Files and paths to analyze
  paths:
    - "**/*.ts"
    - "**/*.tsx"
    - "**/*.js"
    - "**/*.jsx"
    - "**/*.mjs"
    - ".github/scripts/**/*"

  # Patterns to auto-detect and suggest fixes
  patterns:
    - id: unwrapped-json-parse
      description: "Unwrapped JSON.parse calls"
      severity: warning
      pattern: "JSON.parse\\([^)]+\\)"
      exclude_pattern: "try\\s*{[^}]*JSON\\.parse\\([^)]+\\)"
      fix_template: |
        try {
          const parsed = JSON.parse({{original}});
          if (!parsed || typeof parsed !== '{{expected_type}}') {
            console.warn('Invalid data format');
            return {{default_value}};
          }
          return parsed;
        } catch (e) {
          console.error('Parse error:', e);
          return {{default_value}};
        }

    - id: unhandled-promise
      description: "Unhandled Promise rejection"
      severity: warning
      pattern: "await\\s+\\w+\\([^)]*\\)"
      exclude_pattern: "try\\s*{[^}]*await"
      fix_template: |
        try {
          {{original}}
        } catch (error) {
          console.error(`Operation failed: ${error.message}`);
          {{recovery_action}}
        }

# Auto-resolution settings
resolution:
  # Conditions for auto-resolving conversations
  auto_resolve:
    - type: pattern_match
      description: "Fixed unwrapped JSON.parse"
      matches:
        - "try\\s*{[^}]*JSON\\.parse"
        - "catch\\s*\\([^)]*\\)"
        - "console\\.error"

    - type: pattern_match
      description: "Fixed unhandled promise"
      matches:
        - "try\\s*{[^}]*await"
        - "catch\\s*\\([^)]*\\)"
        - "error\\.message"

# Response templates
responses:
  fix_suggested: |
    ${BOT_ICON} Here's how to fix this:

    ```typescript
    ${fix_template}
    ```

    I've analyzed your code and suggest implementing this pattern for better error handling.

  fix_verified: |
    ${BOT_ICON} âœ… Fixed by Seer!

    I see you've implemented proper error handling. Great job! The code now safely handles potential errors.

  fix_needed: |
    ${BOT_ICON} This code might be risky without proper error handling.
    Consider wrapping it in a try-catch block to handle potential failures gracefully.

# Integration settings
github:
  # Labels to apply on issues/PRs
  labels:
    needs_fix: "needs-error-handling"
    fixed: "error-handling-added"

  # Status checks
  status_checks:
    name: "Seer Code Review"
    contexts:
      - "Error Handling"
      - "Type Safety"

# Advanced settings
advanced:
  # Rate limiting to prevent too many comments
  rate_limit:
    max_comments_per_pr: 5
    cooldown_minutes: 10

  # Machine learning settings
  ml:
    enabled: true
    learn_from_fixes: true
    pattern_recognition: true
