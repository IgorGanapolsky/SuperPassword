name: Agent Orchestration System

on:
  schedule:
    - cron: "*/15 * * * *" # Run every 15 minutes
  workflow_dispatch: # Allow manual triggering
  issues:
    types: [opened, edited, closed, reopened]
  pull_request:
    types: [opened, synchronize, closed]

jobs:
  orchestrate:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: write
      projects: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize AI Agent
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Configure Agent Environment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          pip install --upgrade pip
          pip install pytest pytest-cov pylint black mypy
          pip install openai langchain pydantic fastapi
          pip install pandas numpy scikit-learn
          pip install python-dotenv requests

      - name: Run Health Diagnostics
        id: diagnostics
        run: |
          python -m pytest --cov=. --cov-report=json:coverage.json
          pylint . --output-format=json > lint_report.json
          mypy . --json-report --json-report-file type_report.json
          echo '{"repo": "'${{ github.repository }}'"}' > repo_info.json
          jq -s 'add' coverage.json lint_report.json type_report.json repo_info.json > health_report.json

      - name: Process Metrics
        run: |
          python <<EOF
          import json
          import os

          with open('health_report.json', 'r') as f:
              data = json.load(f)
              
          metrics = {
              'coverage': data.get('totals', {}).get('percent_covered', 0),
              'lint_score': len(data.get('linting', {}).get('errors', [])),
              'type_check_score': len(data.get('type_checking', {}).get('errors', []))
          }

          with open('metrics.json', 'w') as f:
              json.dump(metrics, f)
          EOF

      - name: Update Project Board
        if: always()
        run: |
          gh api -X POST /repos/${{ github.repository }}/issues \
            -f title="Health Report Update" \
            -f body="$(cat health_report.json | jq -r tostring)" \
            -f labels[]="automated,health-report"

      - name: Generate AI Insights
        run: |
          python <<EOF
          import json
          import datetime

          with open('health_report.json', 'r') as f:
              data = json.load(f)
              
          insights = {
              'timestamp': datetime.datetime.now().isoformat(),
              'health_score': sum([data.get('coverage', 0), 
                                  100 - data.get('lint_score', 0), 
                                  100 - data.get('type_check_score', 0)]) / 3,
              'recommendations': [
                  'Improve test coverage',
                  'Fix linting issues',
                  'Address type checking errors'
              ]
          }

          with open('insights.json', 'w') as f:
              json.dump(insights, f)
          EOF

      - name: Archive Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: agent-insights
          path: |
            health_report.json
            insights/
            metrics/
