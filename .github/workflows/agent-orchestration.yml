name: Agent Orchestration System

on:
  schedule:
    - cron: "*/15 * * * *" # Run every 15 minutes
  workflow_dispatch: # Allow manual triggering
  issues:
    types: [opened, edited, closed, reopened]
  pull_request:
    types: [opened, synchronize, closed]

jobs:
  orchestrate:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: write
      projects: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize AI Agent
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Configure Agent Environment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          pip install --upgrade pip
          pip install pytest pytest-cov pylint black mypy
          pip install openai langchain pydantic fastapi
          pip install pandas numpy scikit-learn
          pip install python-dotenv requests

      - name: Run Health Diagnostics
        id: diagnostics
        run: |
          python -m pytest --cov=. --cov-report=json:coverage.json
          pylint . --output-format=json > lint_report.json
          mypy . --json-report --json-report-file type_report.json
          echo "{\"repo\": \"${{ github.repository }}\", \"run_id\": \"${{ github.run_id }}\"}" > repo_info.json
          jq -s "add" coverage.json lint_report.json type_report.json repo_info.json > health_report.json

      - name: Process Metrics
        run: |
          python <<EOF
          import json
          import os

          with open("health_report.json", "r") as f:
              data = json.load(f)
              
          metrics = {
              "coverage": data.get("totals", {}).get("percent_covered", 0),
              "lint_score": len(data.get("linting", {}).get("errors", [])),
              "type_check_score": len(data.get("type_checking", {}).get("errors", []))
          }

          with open("metrics.json", "w") as f:
              json.dump(metrics, f)
          EOF

      - name: Update Status Board
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get status board issue number (with status-board label)
          BOARD_NUMBER=$(gh issue list -l status-board --json number -q ".[0].number")

          # Generate status update
          python <<EOF
          import json
          import datetime
          from datetime import timezone

          def load_json(file):
              try:
                  with open(file, "r") as f:
                      return json.load(f)
              except:
                  return {}

          metrics = load_json("metrics.json")
          health = load_json("health_report.json")

          status = {
              "timestamp": datetime.datetime.now(timezone.utc).isoformat(),
              "run_id": "${{ github.run_id }}",
              "metrics": {
                  "coverage": f"{metrics.get(coverage, 0):.1f}%",
                  "lint_issues": metrics.get("lint_score", 0),
                  "type_issues": metrics.get("type_check_score", 0)
              },
              "health_score": (
                  float(metrics.get("coverage", 0)) +
                  (100 - float(metrics.get("lint_score", 0))) +
                  (100 - float(metrics.get("type_check_score", 0)))
              ) / 3
          }

          body = f"""## Status Board Update

          ### 🏃‍♂️ Latest Run
          - **Run ID**: [{status["run_id"]}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Timestamp**: {status["timestamp"]}

          ### 📊 Metrics
          - **Coverage**: {status["metrics"]["coverage"]}
          - **Linting Issues**: {status["metrics"]["lint_issues"]}
          - **Type Check Issues**: {status["metrics"]["type_issues"]}

          ### 🏥 Health Score
          - **Overall Score**: {status["health_score"]:.1f}%

          ### 🎯 Action Items
          1. {"🟢 All good!" if status["health_score"] > 90 else "🔴 Needs attention"}
          """

          with open("status_update.md", "w") as f:
              f.write(body)
          EOF

          # Update the status board issue
          gh issue comment $BOARD_NUMBER -F status_update.md

      - name: Archive Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: agent-insights
          path: |
            health_report.json
            insights/
            metrics/
