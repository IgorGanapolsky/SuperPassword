name: Kanban Board Automation

on:
  issues:
    types: [opened, closed, reopened, assigned, unassigned, labeled]
  pull_request:
    types: [opened, closed, reopened, ready_for_review, converted_to_draft]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      sync_all:
        description: 'Sync all open issues and PRs to board'
        type: boolean
        default: true

env:
  PROJECT_NUMBER: 3
  ORG: IgorGanapolsky

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  sync-to-board:
    name: Sync to Kanban Board
    runs-on: ubuntu-latest
    
    steps:
      - name: Get Project ID
        id: project
        env:
          GH_TOKEN: ${{ secrets.PROJECT_PAT || secrets.GITHUB_TOKEN }}
        run: |
          PROJECT_ID=$(gh api graphql -f query='
            query($org: String!, $number: Int!) {
              user(login: $org) {
                projectV2(number: $number) {
                  id
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=${{ env.ORG }} -f number=${{ env.PROJECT_NUMBER }} --jq '.data.user.projectV2.id')
          
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          
          # Get Status field ID and options
          STATUS_FIELD=$(gh api graphql -f query='
            query($org: String!, $number: Int!) {
              user(login: $org) {
                projectV2(number: $number) {
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=${{ env.ORG }} -f number=${{ env.PROJECT_NUMBER }} --jq '.data.user.projectV2.fields.nodes[] | select(.name == "Status")')
          
          STATUS_FIELD_ID=$(echo "$STATUS_FIELD" | jq -r '.id')
          TODO_ID=$(echo "$STATUS_FIELD" | jq -r '.options[] | select(.name == "Todo") | .id')
          IN_PROGRESS_ID=$(echo "$STATUS_FIELD" | jq -r '.options[] | select(.name == "In Progress") | .id')
          REVIEW_ID=$(echo "$STATUS_FIELD" | jq -r '.options[] | select(.name == "Review") | .id')
          DONE_ID=$(echo "$STATUS_FIELD" | jq -r '.options[] | select(.name == "Done") | .id')
          
          echo "status_field_id=$STATUS_FIELD_ID" >> $GITHUB_OUTPUT
          echo "todo_id=$TODO_ID" >> $GITHUB_OUTPUT
          echo "in_progress_id=$IN_PROGRESS_ID" >> $GITHUB_OUTPUT
          echo "review_id=$REVIEW_ID" >> $GITHUB_OUTPUT
          echo "done_id=$DONE_ID" >> $GITHUB_OUTPUT
      
      - name: Add Issue/PR to Board
        if: github.event.action == 'opened' || github.event.inputs.sync_all
        env:
          GH_TOKEN: ${{ secrets.PROJECT_PAT || secrets.GITHUB_TOKEN }}
        run: |
          # For new issues/PRs or manual sync
          if [[ "${{ github.event.inputs.sync_all }}" == "true" ]]; then
            echo "üìã Syncing all open issues and PRs to board..."
            
            # Get all open issues
            ISSUES=$(gh issue list --repo ${{ github.repository }} --state open --json number --jq '.[].number')
            for issue in $ISSUES; do
              ITEM_ID=$(gh api graphql -f query='
                mutation($project: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $project, contentId: $contentId}) {
                    item {
                      id
                    }
                  }
                }' -f project=${{ steps.project.outputs.project_id }} \
                   -f contentId=$(gh issue view $issue --repo ${{ github.repository }} --json id --jq '.id') \
                   --jq '.data.addProjectV2ItemById.item.id' 2>/dev/null || echo "")
              
              if [[ -n "$ITEM_ID" ]]; then
                echo "‚úÖ Added issue #$issue to board"
              fi
            done
            
            # Get all open PRs
            PRS=$(gh pr list --repo ${{ github.repository }} --state open --json number --jq '.[].number')
            for pr in $PRS; do
              ITEM_ID=$(gh api graphql -f query='
                mutation($project: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $project, contentId: $contentId}) {
                    item {
                      id
                    }
                  }
                }' -f project=${{ steps.project.outputs.project_id }} \
                   -f contentId=$(gh pr view $pr --repo ${{ github.repository }} --json id --jq '.id') \
                   --jq '.data.addProjectV2ItemById.item.id' 2>/dev/null || echo "")
              
              if [[ -n "$ITEM_ID" ]]; then
                echo "‚úÖ Added PR #$pr to board"
                
                # Set to Review column for PRs
                gh api graphql -f query='
                  mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $project,
                      itemId: $item,
                      fieldId: $field,
                      value: {singleSelectOptionId: $value}
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }' -f project=${{ steps.project.outputs.project_id }} \
                     -f item=$ITEM_ID \
                     -f field=${{ steps.project.outputs.status_field_id }} \
                     -f value=${{ steps.project.outputs.review_id }}
              fi
            done
          else
            # Add single issue/PR
            CONTENT_ID=${{ github.event.issue.node_id || github.event.pull_request.node_id }}
            
            if [[ -n "$CONTENT_ID" ]]; then
              ITEM_ID=$(gh api graphql -f query='
                mutation($project: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $project, contentId: $contentId}) {
                    item {
                      id
                    }
                  }
                }' -f project=${{ steps.project.outputs.project_id }} \
                   -f contentId=$CONTENT_ID \
                   --jq '.data.addProjectV2ItemById.item.id')
              
              echo "‚úÖ Added to board with item ID: $ITEM_ID"
              echo "item_id=$ITEM_ID" >> $GITHUB_ENV
            fi
          fi
      
      - name: Move Card Based on Status
        if: github.event.action != 'opened' && !github.event.inputs.sync_all
        env:
          GH_TOKEN: ${{ secrets.PROJECT_PAT || secrets.GITHUB_TOKEN }}
        run: |
          # Determine target column based on event
          TARGET_COLUMN=""
          
          if [[ "${{ github.event.action }}" == "assigned" ]]; then
            TARGET_COLUMN="${{ steps.project.outputs.in_progress_id }}"
            echo "üèÉ Moving to In Progress"
          elif [[ "${{ github.event.action }}" == "closed" ]]; then
            TARGET_COLUMN="${{ steps.project.outputs.done_id }}"
            echo "‚úÖ Moving to Done"
          elif [[ "${{ github.event.pull_request }}" != "" ]] && [[ "${{ github.event.action }}" == "ready_for_review" ]]; then
            TARGET_COLUMN="${{ steps.project.outputs.review_id }}"
            echo "üëÄ Moving to Review"
          fi
          
          if [[ -n "$TARGET_COLUMN" ]]; then
            # Get item ID from board
            CONTENT_ID=${{ github.event.issue.node_id || github.event.pull_request.node_id }}
            
            ITEM_ID=$(gh api graphql -f query='
              query($org: String!, $number: Int!) {
                user(login: $org) {
                  projectV2(number: $number) {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                          }
                          ... on PullRequest {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              }' -f org=${{ env.ORG }} -f number=${{ env.PROJECT_NUMBER }} \
                 --jq ".data.user.projectV2.items.nodes[] | select(.content.id == \"$CONTENT_ID\") | .id")
            
            if [[ -n "$ITEM_ID" ]]; then
              # Update status
              gh api graphql -f query='
                mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $project,
                    itemId: $item,
                    fieldId: $field,
                    value: {singleSelectOptionId: $value}
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }' -f project=${{ steps.project.outputs.project_id }} \
                   -f item=$ITEM_ID \
                   -f field=${{ steps.project.outputs.status_field_id }} \
                   -f value=$TARGET_COLUMN
              
              echo "‚úÖ Updated card position"
            fi
          fi
      
      - name: Trigger Agent for New Issues
        if: github.event.action == 'opened' && github.event.issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Auto-label new issues for agent processing
          gh issue edit ${{ github.event.issue.number }} \
            --repo ${{ github.repository }} \
            --add-label "ai:ready"
          
          echo "ü§ñ Labeled issue for agent processing"
