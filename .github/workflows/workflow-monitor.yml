name: Workflow Monitor

on:
  schedule:
    - cron: "0 */6 * * *"  # Every 6 hours
  workflow_dispatch:

permissions:
  actions: read
  issues: write

jobs:
  monitor-usage:
    name: Monitor Workflow Usage
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check workflow runs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get workflow runs from last 24 hours
            const oneDayAgo = new Date();
            oneDayAgo.setDate(oneDayAgo.getDate() - 1);
            
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              created: `>${oneDayAgo.toISOString()}`
            });
            
            // Count runs by workflow
            const workflowCounts = {};
            let totalRuns = 0;
            
            for (const run of runs.workflow_runs) {
              const name = run.name;
              workflowCounts[name] = (workflowCounts[name] || 0) + 1;
              totalRuns++;
            }
            
            // Alert if too many runs
            const MAX_DAILY_RUNS = 50;  // Adjust this threshold
            const MAX_PER_WORKFLOW = 20;  // Max runs per workflow
            
            let alertMessage = '';
            
            if (totalRuns > MAX_DAILY_RUNS) {
              alertMessage += `⚠️ **HIGH USAGE ALERT**\n\n`;
              alertMessage += `Total workflow runs in last 24h: **${totalRuns}** (threshold: ${MAX_DAILY_RUNS})\n\n`;
            }
            
            // Check individual workflows
            for (const [workflow, count] of Object.entries(workflowCounts)) {
              if (count > MAX_PER_WORKFLOW) {
                alertMessage += `- ${workflow}: ${count} runs (exceeds limit of ${MAX_PER_WORKFLOW})\n`;
              }
            }
            
            // Create issue if alert needed
            if (alertMessage) {
              // Check if alert issue already exists
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'workflow-alert',
                state: 'open'
              });
              
              if (issues.length === 0) {
                // Create new alert issue
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: '🚨 Workflow Usage Alert',
                  body: alertMessage + '\n\n**Action Required:** Review and optimize workflow configurations to prevent billing issues.',
                  labels: ['workflow-alert', 'high-priority']
                });
              }
            }
            
            // Output summary
            console.log(`Total runs in 24h: ${totalRuns}`);
            console.log('Breakdown by workflow:');
            for (const [workflow, count] of Object.entries(workflowCounts)) {
              console.log(`  - ${workflow}: ${count}`);
            }
