---
name: Status Issue Updater

on:
  schedule:
    - cron: "0 * * * *" # Hourly
  workflow_dispatch:
  push:
    branches: [main, develop]
  issues:
    types: [opened, edited, labeled, unlabeled, closed, reopened, assigned]
  pull_request:
    types: [opened, edited, ready_for_review, review_requested, closed, reopened]

permissions:
  contents: read
  issues: write
  pull-requests: read

concurrency:
  group: status-issue-updater
  cancel-in-progress: true

env:
  STATUS_ISSUE_NUMBER: 81
  TZ: America/New_York

jobs:
  update-status-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Update Project Status Issue
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const STATUS_ISSUE = parseInt(process.env.STATUS_ISSUE_NUMBER, 10);

            // Helpers
            function median(nums) {
              if (!nums.length) return 0;
              const s = [...nums].sort((a,b)=>a-b);
              const mid = Math.floor(s.length/2);
              return s.length % 2 ? s[mid] : (s[mid-1]+s[mid])/2;
            }

            function fmtDuration(ms) {
              const sec = Math.floor(ms/1000);
              if (sec < 60) return `${sec}s`;
              const min = Math.floor(sec/60);
              if (min < 60) return `${min}m`;
              const hr = Math.floor(min/60);
              if (hr < 24) return `${hr}h`;
              const day = Math.floor(hr/24);
              if (day < 30) return `${day}d`;
              const mo = Math.floor(day/30);
              if (mo < 12) return `${mo}mo`;
              const yr = Math.floor(mo/12);
              return `${yr}y`;
            }

            // Fetch all open issues (exclude PRs and the status issue)
            const allOpenIssues = await github.paginate(github.rest.issues.listForRepo, {
              owner, repo, state: 'open', per_page: 100
            });
            const issues = allOpenIssues.filter(i => !i.pull_request && i.number !== STATUS_ISSUE);

            // Fetch open PRs
            const openPRs = await github.paginate(github.rest.pulls.list, {
              owner, repo, state: 'open', per_page: 100
            });

            // Recently merged PRs (last 30 days)
            const closedPRs = await github.paginate(github.rest.pulls.list, {
              owner, repo, state: 'closed', per_page: 100
            });
            const now = new Date();
            const last30 = new Date(now.getTime() - 30*24*60*60*1000);
            const mergedLast30 = closedPRs.filter(pr => pr.merged_at && new Date(pr.merged_at) >= last30);

            // Compute metrics
            const issueCount = issues.length;
            const prCount = openPRs.length;
            const inProgress = issues.filter(i => (i.assignees?.length || 0) > 0).length;

            const bugCount = issues.filter(i => i.labels?.some(l => /\bbug\b/i.test(l.name))).length;
            const featureCount = issues.filter(i => i.labels?.some(l => /(enhancement|feature)/i.test(l.name))).length;

            // Activity last 7 days
            const last7 = new Date(now.getTime() - 7*24*60*60*1000);
            const activeIssues7 = issues.filter(i => new Date(i.updated_at) >= last7).length;
            const activePRs7 = openPRs.filter(pr => new Date(pr.updated_at) >= last7).length;
            const activityCount = activeIssues7 + activePRs7;
            const totalWorkItems = issueCount + prCount;
            const activityRate = totalWorkItems ? Math.round((activityCount / totalWorkItems) * 100) : 0;

            // PR throughput and lead time (last 30 days)
            const throughput = mergedLast30.length;
            const leadTimes = mergedLast30.map(pr => new Date(pr.merged_at) - new Date(pr.created_at));
            const medianLead = median(leadTimes);

            // Guard-rails / status badges
            const issueHealth = issueCount > 15 ? '🔴 High' : issueCount > 7 ? '🟡 Medium' : '🟢 Good';
            const prHealth = prCount > 7 ? '🔴 High' : prCount > 3 ? '🟡 Medium' : '🟢 Good';
            const bugHealth = bugCount > 5 ? '🔴 Critical' : bugCount > 2 ? '🟡 Moderate' : '🟢 Low';
            const progressRate = issueCount ? Math.round((inProgress / issueCount) * 100) : 0;
            const progressHealth = progressRate >= 40 ? '🟢 Good' : progressRate >= 20 ? '🟡 Fair' : '🔴 Needs Attention';
            const activityHealth = activityRate >= 50 ? '🟢 High' : activityRate >= 25 ? '🟡 Moderate' : '🔴 Low';

            // Recommendations
            const recs = [];
            if (issueCount > 15) recs.push('⚠️ High open issue count. Prioritize triage and resolution.');
            if (bugCount > 5) recs.push('🐛 Multiple bugs detected. Focus on stabilization.');
            if (progressRate < 30 && issueCount > 0) recs.push('📈 Low active work rate. Assign/advance more issues.');
            if (activityRate < 25 && totalWorkItems > 0) recs.push('💡 Low repo activity. Encourage smaller, frequent PRs.');
            if (!recs.length) recs.push('✅ Healthy project indicators. Maintain current velocity.');

            // Top priorities (if labels exist)
            const priorities = issues
              .filter(i => i.labels?.some(l => /^priority:/i.test(l.name)))
              .slice(0, 5)
              .map(i => `- ${i.title} (#${i.number})`);

            const fmtDate = new Date().toLocaleString('en-US', { timeZone: process.env.TZ, dateStyle: 'full', timeStyle: 'medium' });

            const body = `# 📊 SuperPassword Project Status

*Last updated: ${fmtDate}*

## 📈 Current Metrics

| Metric | Count | Status |
| --- | ---: | --- |
| 📋 Open Issues | ${issueCount} | ${issueHealth} |
| 🔧 Open PRs | ${prCount} | ${prHealth} |
| 🏃 In Progress | ${inProgress} | ${progressRate}% of issues |
| 🐛 Bugs | ${bugCount} | ${bugHealth} |
| ✨ Features | ${featureCount} | ${featureCount} planned |

## 🚀 Delivery (last 30 days)
- Merged PRs: ${throughput}
- Median PR lead time: ${fmtDuration(medianLead)}

## 📊 Activity (last 7 days)
- Active items updated: ${activityCount}
- Activity rate: ${activityRate}% (${activityHealth})

${priorities.length ? '## 🔝 Top Priorities\n' + priorities.join('\n') + '\n' : ''}

## 🎯 Recommendations
${recs.map(r => `- ${r}`).join('\n')}

---

Automation: hourly + on repo events. Manual refresh: Actions → “Status Issue Updater”.`;

            // Ensure the status issue exists; create if missing, then update
            try {
              await github.rest.issues.get({ owner, repo, issue_number: STATUS_ISSUE });
            } catch (e) {
              const created = await github.rest.issues.create({
                owner, repo,
                title: '📊 SuperPassword Project Status',
                body: 'Initializing status…',
                labels: ['automation', 'metrics', 'status-board']
              });
              core.info(`Created status issue #${created.data.number}`);
            }

            await github.rest.issues.update({
              owner, repo, issue_number: STATUS_ISSUE, body
            });

            core.info(`Updated status issue #${STATUS_ISSUE}`);

