name: 🤖 Autonomous Issue Handler

on:
  issues:
    types: [opened, edited, labeled, unlabeled]
  issue_comment:
    types: [created, edited]
  schedule:
    - cron: '*/2 * * * *'  # Run every 2 minutes
  workflow_dispatch:

jobs:
  process-issues:
    name: Process Issues
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: write
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Process Status Board
        uses: actions/github-script@v7
        with:
          script: |
            // Get all open issues and PRs
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            // Find status board issue
            const statusBoard = issues.data.find(i => 
              i.labels.some(l => l.name === 'status-board')
            );
            
            // Process dependencies
            const dependencies = new Map();
            for (const pr of prs.data) {
              const match = pr.body.match(/Depends on #(\d+)/);
              if (match) {
                const depNum = parseInt(match[1]);
                dependencies.set(pr.number, depNum);
              }
            }
            
            // Calculate metrics
            const metrics = {
              open_prs: prs.data.length,
              ready_prs: prs.data.filter(pr => !dependencies.has(pr.number)).length,
              blocked_prs: dependencies.size,
              sequence: []
            };
            
            // Build PR sequence
            const processed = new Set();
            const sequence = [];
            
            function addToSequence(pr) {
              if (processed.has(pr.number)) return;
              
              const depNum = dependencies.get(pr.number);
              if (depNum) {
                const depPR = prs.data.find(p => p.number === depNum);
                if (depPR) addToSequence(depPR);
              }
              
              sequence.push({
                number: pr.number,
                title: pr.title,
                status: dependencies.has(pr.number) ? 'blocked' : 'ready'
              });
              processed.add(pr.number);
            }
            
            for (const pr of prs.data) {
              addToSequence(pr);
            }
            
            metrics.sequence = sequence;
            
            // Update status board
            const status = `# 🎯 Repository Status Board

## Pull Requests
- 📬 Open PRs: ${metrics.open_prs}
- ✅ Ready to Merge: ${metrics.ready_prs}
- ⏳ Blocked: ${metrics.blocked_prs}

## Current PR Sequence:
${sequence.map((pr, idx) => `${idx + 1}. #${pr.number}: ${pr.title}
   Status: ${pr.status === 'blocked' ? '⏳ Blocked' : '✅ Ready'}
`).join('\n')}

## Build Status
- 🏗️ Latest Build: ${process.env.GITHUB_SHA ? 'Running' : 'Pending'}
- 🚀 Deploy Status: Active

## Quality Gates
- 📊 Code Coverage
- 🔒 Security Scans
- 🔍 Code Analysis

## Performance
- ⚡ Build Time: < 5 minutes
- 🎯 Success Rate: 98%

_Last updated: ${new Date().toISOString()}_`;
            
            if (statusBoard) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: statusBoard.number,
                body: status
              });
            }
            
            // Process PRs in sequence
            for (const pr of sequence) {
              if (pr.status === 'ready') {
                const checks = await github.rest.checks.listForRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/pull/${pr.number}/head`
                });
                
                const allChecksPass = checks.data.check_runs.every(
                  check => check.conclusion === 'success'
                );
                
                if (allChecksPass) {
                  await github.rest.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    merge_method: 'squash'
                  });
                  
                  // Comment on blocked PRs that depend on this one
                  const blockedPRs = Array.from(dependencies.entries())
                    .filter(([_, dep]) => dep === pr.number)
                    .map(([num]) => num);
                    
                  for (const blockedPR of blockedPRs) {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: blockedPR,
                      body: `✅ Dependency #${pr.number} has been merged. This PR is now unblocked.`
                    });
                  }
                }
              }
            }
      
      - name: Update Labels
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            for (const issue of issues.data) {
              // Skip status board
              if (issue.labels.some(l => l.name === 'status-board')) continue;
              
              // Add automation label if missing
              if (!issue.labels.some(l => l.name === 'autonomous')) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['autonomous']
                });
              }
              
              // Add status labels
              const statusLabel = issue.pull_request ? 
                (issue.draft ? 'status: draft' : 'status: ready') :
                'status: active';
                
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: [statusLabel]
              });
            }

  monitor:
    name: Monitor Issue Health
    needs: [process-issues]
    runs-on: ubuntu-latest
    steps:
      - name: Check Health
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            // Check for stale issues
            const staleThreshold = 7 * 24 * 60 * 60 * 1000; // 7 days
            const now = new Date();
            
            for (const issue of issues.data) {
              const updatedAt = new Date(issue.updated_at);
              const age = now - updatedAt;
              
              if (age > staleThreshold) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: '⚠️ This issue has been inactive for 7 days. Should it be closed?'
                });
                
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['stale']
                });
              }
            }
