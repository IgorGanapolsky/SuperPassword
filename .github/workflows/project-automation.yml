name: Project Board Automation (2025)

on:
  workflow_dispatch:  # Allow manual triggers
  issues:
    types: [opened, edited, closed, reopened, assigned, unassigned, labeled, unlabeled]
  pull_request:
    types: [opened, edited, closed, reopened, ready_for_review, review_requested, labeled, unlabeled]
  pull_request_review:
    types: [submitted, edited, dismissed]
  schedule:
    - cron: '*/30 * * * *'  # Run metrics update every 30 minutes

permissions:
  issues: write
  pull-requests: write
  repository-projects: write
  contents: read
  id-token: write

jobs:
  project_metrics:
    runs-on: ubuntu-latest
    steps:
      - name: Calculate Project Metrics
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const stats = {
              openIssues: 0,
              inProgress: 0,
              inReview: 0,
              completed: 0,
              totalPRs: 0,
              mergedPRs: 0,
              avgReviewTime: 0,
              avgTimeToMerge: 0
            };

            // Collect PR metrics
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });

            let totalReviewTime = 0;
            let totalMergeTime = 0;

            prs.data.forEach(pr => {
              stats.totalPRs++;
              if (pr.merged_at) {
                stats.mergedPRs++;
                const reviewTime = new Date(pr.merged_at) - new Date(pr.created_at);
                totalMergeTime += reviewTime;

                if (pr.reviews && pr.reviews.length > 0) {
                  const firstReview = new Date(pr.reviews[0].submitted_at);
                  totalReviewTime += firstReview - new Date(pr.created_at);
                }
              }
            });

            stats.avgReviewTime = totalReviewTime / stats.mergedPRs / (1000 * 60 * 60);
            stats.avgTimeToMerge = totalMergeTime / stats.mergedPRs / (1000 * 60 * 60);

            // Update status issue
            const update = `## Project Health Dashboard

### 📊 Current Sprint Metrics
- Open Issues: ${stats.openIssues}
- In Progress: ${stats.inProgress}
- In Review: ${stats.inReview}
- Completed: ${stats.completed}

### 🚀 Velocity Metrics
- Pull Requests: ${stats.totalPRs}
- Merged PRs: ${stats.mergedPRs}
- Merge Rate: ${((stats.mergedPRs / stats.totalPRs) * 100).toFixed(1)}%

### ⏱️ Time Metrics
- Average Time to First Review: ${stats.avgReviewTime.toFixed(1)}h
- Average Time to Merge: ${stats.avgTimeToMerge.toFixed(1)}h

### 🎯 Sprint Goals
- [ ] Zero stale PRs (>7 days)
- [ ] Review response < 24h
- [ ] Test coverage > 80%

Last updated: ${new Date().toISOString()}`;

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: 81,
              body: update
            });

  automate-project-columns:
    runs-on: ubuntu-latest
    steps:
      - name: Move new issues to Todo
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const projectId = "3"; // SuperPassword Project Board

            await github.rest.projects.createCard({
              column_id: "To Do",
              content_id: context.payload.issue.id,
              content_type: "Issue"
            });

      - name: Move assigned issues to In Progress
        if: github.event_name == 'issues' && github.event.action == 'assigned'
        uses: actions/github-script@v7
        with:
          script: |
            const card = await github.rest.projects.listCards({
              column_id: "To Do"
            }).then(res => res.data.find(card => card.content_url.includes(context.payload.issue.number)));

            if (card) {
              await github.rest.projects.moveCard({
                card_id: card.id,
                position: "bottom",
                column_id: "In Progress"
              });
            }

      - name: Move PRs ready for review
        if: github.event_name == 'pull_request' && github.event.action == 'ready_for_review'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const card = await github.rest.projects.listCards({
              column_id: "In Progress"
            }).then(res => res.data.find(card => card.content_url.includes(context.payload.pull_request.number)));

            if (card) {
              await github.rest.projects.moveCard({
                card_id: card.id,
                position: "bottom",
                column_id: "Review"
              });
            }

      - name: Move closed issues to Done
        if: github.event_name == 'issues' && github.event.action == 'closed'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const columns = ['To Do', 'In Progress', 'Review'];
            for (const columnId of columns) {
              const card = await github.rest.projects.listCards({
                column_id: columnId
              }).then(res => res.data.find(card => card.content_url.includes(context.payload.issue.number)));
              
              if (card) {
                await github.rest.projects.moveCard({
                  card_id: card.id,
                  position: "bottom",
                  column_id: "Done"
                });
                break;
              }
            }

      - name: Move merged PRs to Done
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const columns = ['To Do', 'In Progress', 'Review'];
            for (const columnId of columns) {
              const card = await github.rest.projects.listCards({
                column_id: columnId
              }).then(res => res.data.find(card => card.content_url.includes(context.payload.pull_request.number)));
              
              if (card) {
                await github.rest.projects.moveCard({
                  card_id: card.id,
                  position: "bottom",
                  column_id: "Done"
                });
                break;
              }
            }

      - name: Update linked issues when PR merged
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged
        uses: actions/github-script@v7
        with:
          script: |
            // Extract issue numbers from PR body using "Fixes #X" or "Closes #X"
            const issueRefs = context.payload.pull_request.body.match(/(fixes|closes)\s*#(\d+)/gi);
            if (!issueRefs) return;

            for (const ref of issueRefs) {
              const issueNumber = ref.match(/\d+/)[0];
              
              // Move the issue card to Done
              const columns = ['To Do', 'In Progress', 'Review'];
              for (const columnId of columns) {
                const card = await github.rest.projects.listCards({
                  column_id: columnId
                }).then(res => res.data.find(card => card.content_url.includes(issueNumber)));
                
                if (card) {
                  await github.rest.projects.moveCard({
                    card_id: card.id,
                    position: "bottom",
                    column_id: "Done"
                  });
                  break;
                }
              }
            }
