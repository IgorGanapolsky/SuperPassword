name: CI
# FUTURE OPTIMIZATIONS:
# - For faster allocation, change runs-on to your self-hosted runner label if available
# - Add E2E test matrix (experimental, ios, android) when E2E suite is implemented
# - Add test splitting for 100+ tests by modifying test job with matrix partitions

on:
  pull_request:
    branches: [develop, main]
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [develop, main]

permissions:
  contents: write
  checks: write
  pull-requests: write
  security-events: write
  actions: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache dependencies
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.expo
            ~/Library/Caches/Yarn
            ~/Library/Caches/CocoaPods
          key: ${{ runner.os }}-deps-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: |
          npm ci
          npx expo install --fix --non-interactive || true

  typecheck:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('package-lock.json') }}

      - name: TypeScript check
        run: npx tsc --noEmit

  lint:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('package-lock.json') }}

      - name: Lint & format check
        run: npm run lint && npm run fmt

  test:
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["18", "20"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('package-lock.json') }}

      - name: Test
        run: npm run test --coverage

      - name: Upload coverage
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  final:
    needs: [typecheck, lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Start final timing
        id: time_start
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('package-lock.json') }}

      - name: Validate Expo config
        run: npx expo-doctor

      - name: Check native dependencies
        run: npx react-native doctor

      - name: Record final duration
        if: always()
        run: |
          end_time=$(date +%s)
          duration=$((end_time - ${{ steps.time_start.outputs.start_time }}))
          echo "Final validation duration: $duration seconds"
          echo "Duration=$duration" >> $GITHUB_STEP_SUMMARY

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Start security timing
        id: time_start
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Dependency Review
        uses: actions/dependency-review-action@v3

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "SuperPassword"
          path: "."
          format: "HTML"

      - name: Run Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Record security duration
        if: always()
        run: |
          end_time=$(date +%s)
          duration=$((end_time - ${{ steps.time_start.outputs.start_time }}))
          echo "Security job duration: $duration seconds"
          echo "Duration=$duration" >> $GITHUB_STEP_SUMMARY

  build:
    needs: [final, security]
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Start build timing
        id: time_start
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build Development
        run: |
          npm ci
          eas build --platform all --profile development --non-interactive --no-wait
        env:
          EXPO_PUBLIC_SENTRY_DSN: ${{ secrets.EXPO_PUBLIC_SENTRY_DSN }}

      - name: Store build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-builds
          path: |
            *.apk
            *.ipa

      - name: Record build duration
        if: always()
        run: |
          end_time=$(date +%s)
          duration=$((end_time - ${{ steps.time_start.outputs.start_time }}))
          echo "Build job duration: $duration seconds"
          echo "Duration=$duration" >> $GITHUB_STEP_SUMMARY

  notify:
    needs: [build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Slack Notification
        id: check_slack
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "notify=true" >> $GITHUB_OUTPUT
          else
            echo "notify=false" >> $GITHUB_OUTPUT
          fi

      - name: Notify status
        if: steps.check_slack.outputs.notify == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
