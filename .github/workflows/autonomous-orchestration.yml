name: 🤖 Autonomous Orchestration

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review, edited]
  pull_request_review:
    types: [submitted, dismissed]
  pull_request_review_comment:
    types: [created, edited]
  issue_comment:
    types: [created, edited]
  check_suite:
    types: [completed]
  status: {}
  schedule:
    - cron: '*/3 * * * *'
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug logging'
        required: false
        default: 'false'

permissions:
  contents: write
  pull-requests: write
  checks: write
  issues: write
  statuses: write

jobs:
  orchestrate:
    name: 🎯 Orchestrate PRs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Analyze PR State
        id: analyze
        uses: actions/github-script@v7
        with:
          script: |
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              direction: 'desc'
            });
            
            const prData = await Promise.all(prs.data.map(async pr => {
              const reviews = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              
              const checks = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });
              
              const depMatch = pr.body.match(/Depends on #(\d+)/);
              const dependsOn = depMatch ? parseInt(depMatch[1]) : null;
              
              return {
                number: pr.number,
                title: pr.title,
                branch: pr.head.ref,
                sha: pr.head.sha,
                reviews: reviews.data,
                checks: checks.data.check_runs,
                dependsOn,
                mergeable: pr.mergeable,
                draft: pr.draft
              };
            }));
            
            core.setOutput('pr_data', JSON.stringify(prData));
      
      - name: Process PRs
        run: |
          PR_DATA='${{ steps.analyze.outputs.pr_data }}'
          
          process_pr() {
            local PR_NUM=$1
            local PR_DATA=$(echo "$PR_DATA" | jq -r ".[] | select(.number == $PR_NUM)")
            local CHECKS_STATUS=$(echo "$PR_DATA" | jq -r '.checks[] | .conclusion')
            local REVIEW_STATUS=$(echo "$PR_DATA" | jq -r '.reviews[] | .state' | sort | uniq)
            
            echo "Processing PR #$PR_NUM"
            
            if echo "$PR_DATA" | jq -e '.draft == true' >/dev/null; then
              echo "PR is draft - skipping"
              return
            fi
            
            local DEP_PR=$(echo "$PR_DATA" | jq -r '.dependsOn')
            if [ "$DEP_PR" != "null" ]; then
              local DEP_STATUS=$(gh pr view "$DEP_PR" --json state -q '.state')
              if [ "$DEP_STATUS" != "MERGED" ]; then
                echo "Waiting on dependency #$DEP_PR"
                gh pr comment "$PR_NUM" --body "⏳ Blocked by #$DEP_PR"
                return
              fi
            fi
            
            if echo "$CHECKS_STATUS" | grep -q "failure"; then
              echo "Found failing checks - attempting auto-fix"
              gh workflow run autonomous-pr.yml -f pr_number="$PR_NUM"
              return
            fi
            
            if echo "$CHECKS_STATUS" | grep -q -v "success"; then
              echo "Checks still pending"
              return
            fi
            
            if ! echo "$REVIEW_STATUS" | grep -q "APPROVED"; then
              echo "Requesting review"
              gh pr edit "$PR_NUM" --add-reviewer IgorGanapolsky
              return
            fi
            
            echo "All checks passed - merging"
            gh pr merge "$PR_NUM" --auto --squash
          }
          
          echo "$PR_DATA" | jq -c '.[]' | while read -r PR; do
            process_pr "$(echo "$PR" | jq -r '.number')"
          done
      
      - name: Update Dashboard
        if: always()
        run: |
          DASHBOARD_NUM=$(gh issue list --label "pr-dashboard" --json number -q '.[0].number')
          
          if [ -z "$DASHBOARD_NUM" ]; then
            gh issue create --title "🎯 PR Orchestration Status" --body "Initializing..." --label "pr-dashboard"
            DASHBOARD_NUM=$(gh issue list --label "pr-dashboard" --json number -q '.[0].number')
          fi
          
          CONTENT="# 🎯 PR Status Board\n\nLast updated: $(date -u)\n\n## Open PRs\n"
          
          while IFS= read -r PR; do
            PR_NUM=$(echo "$PR" | jq -r '.number')
            TITLE=$(echo "$PR" | jq -r '.title')
            STATUS="⏳"
            
            if [ "$(echo "$PR" | jq -r '.draft')" = "true" ]; then
              STATUS="📝"
            elif [ "$(echo "$PR" | jq -r '.dependsOn')" != "null" ]; then
              STATUS="🔗"
            elif echo "$PR" | jq -e '.reviews[] | select(.state == "APPROVED")' >/dev/null; then
              STATUS="✅"
            fi
            
            CONTENT="${CONTENT}\n${STATUS} #${PR_NUM}: ${TITLE}"
          done < <(echo '${{ steps.analyze.outputs.pr_data }}' | jq -c '.[]')
          
          gh issue edit "$DASHBOARD_NUM" --body "$CONTENT"
