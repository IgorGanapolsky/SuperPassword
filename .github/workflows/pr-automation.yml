name: ü§ñ PR Automation

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  check_suite:
    types: [completed]
  schedule:
    - cron: "*/5 * * * *" # Check every 5 minutes

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  automate:
    name: Automate PR Workflow
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4

      - name: Auto-merge Check
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // Check if PR is targeting develop
            if (pr.data.base.ref !== 'develop') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '‚ö†Ô∏è This PR must target the `develop` branch.'
              });
              return;
            }

            // Get check status
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.data.head.sha
            });

            const checksPass = checks.data.check_runs.every(c => 
              c.status === 'completed' && (c.conclusion === 'success' || c.conclusion === 'skipped')
            );

            if (checksPass && pr.data.mergeable) {
              try {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  merge_method: 'squash'
                });
                
                console.log('PR merged successfully');
                
              } catch (error) {
                console.error('Failed to merge:', error);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `‚ö†Ô∏è Auto-merge failed: ${error.message}`
                });
              }
            } else {
              const status = !checksPass ? '‚è≥ Waiting for checks to pass' : '‚ö†Ô∏è PR not mergeable';
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `${status}\n\nI'll try again once all conditions are met.`
              });
            }
