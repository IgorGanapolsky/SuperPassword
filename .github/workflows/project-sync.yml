---
name: Project Board Sync

on:
  issues:
    types: [opened, closed, reopened, assigned]
  pull_request:
    types: [opened, closed, reopened, ready_for_review]
  project_card:
    types: [created, moved]

permissions:
  contents: read
  issues: write
  pull-requests: write
  repository-projects: write
  project: write

jobs:
  sync-project:
    runs-on: ubuntu-latest
    steps:
      - name: Update Project Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const statusIssue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: 81
            });

            const stats = {
              openIssues: 0,
              inProgress: 0,
              readyForReview: 0,
              completed: 0
            };

            // Get project items
            const project = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            if (project.data.length > 0) {
              const columns = await github.rest.projects.listColumns({
                project_id: project.data[0].id
              });

              for (const column of columns.data) {
                const cards = await github.rest.projects.listCards({
                  column_id: column.id
                });

                switch(column.name.toLowerCase()) {
                  case 'to do':
                    stats.openIssues += cards.data.length;
                    break;
                  case 'in progress':
                    stats.inProgress += cards.data.length;
                    break;
                  case 'review':
                    stats.readyForReview += cards.data.length;
                    break;
                  case 'done':
                    stats.completed += cards.data.length;
                    break;
                }
              }
            }

            const update = `## Project Status Update

### Current Stats
- 📝 Open Issues: ${stats.openIssues}
- 🏃 In Progress: ${stats.inProgress}
- 👀 Ready for Review: ${stats.readyForReview}
- ✅ Completed: ${stats.completed}

### Health Metrics
- Completion Rate: ${Math.round((stats.completed / (stats.completed + stats.openIssues)) * 100)}%
- Review Rate: ${Math.round((stats.readyForReview / stats.inProgress) * 100)}%

Last updated: ${new Date().toISOString()}`;

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: 81,
              body: update
            });

name: Project Board Sync

on:
  issues:
    types: [opened, closed, reopened, assigned]
  pull_request:
    types: [opened, closed, reopened, ready_for_review]
  project_card:
    types: [created, moved]

permissions:
  contents: read
  issues: write
  pull-requests: write
  repository-projects: write
  project: write

jobs:
  sync-project:
    runs-on: ubuntu-latest
    steps:
      - name: Update Project Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const statusIssue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: 81
            });

            const stats = {
              openIssues: 0,
              inProgress: 0,
              readyForReview: 0,
              completed: 0
            };

            // Get project items
            const project = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            if (project.data.length > 0) {
              const columns = await github.rest.projects.listColumns({
                project_id: project.data[0].id
              });

              for (const column of columns.data) {
                const cards = await github.rest.projects.listCards({
                  column_id: column.id
                });

                switch(column.name.toLowerCase()) {
                  case 'to do':
                    stats.openIssues += cards.data.length;
                    break;
                  case 'in progress':
                    stats.inProgress += cards.data.length;
                    break;
                  case 'review':
                    stats.readyForReview += cards.data.length;
                    break;
                  case 'done':
                    stats.completed += cards.data.length;
                    break;
                }
              }
            }

            const update = `## Project Status Update

### Current Stats
- 📝 Open Issues: ${stats.openIssues}
- 🏃 In Progress: ${stats.inProgress}
- 👀 Ready for Review: ${stats.readyForReview}
- ✅ Completed: ${stats.completed}

### Health Metrics
- Completion Rate: ${Math.round((stats.completed / (stats.completed + stats.openIssues)) * 100)}%
- Review Rate: ${Math.round((stats.readyForReview / stats.inProgress) * 100)}%

Last updated: ${new Date().toISOString()}`;

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: 81,
              body: update
            });
