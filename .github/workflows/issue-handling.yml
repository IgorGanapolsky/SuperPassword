name: Issue Management (2025)

on:
  issues:
    types: [opened, edited, labeled, unlabeled, reopened, assigned, unassigned]
  issue_comment:
    types: [created]
  schedule:
    - cron: '*/30 * * * *'  # Run health checks every 30 minutes

permissions:
  contents: read
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  triage:
    name: Issue Triage
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
      - uses: actions/checkout@v4
      
      - name: Load Issue Config
        id: config
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const yaml = require('js-yaml');
            const fs = require('fs');
            const config = yaml.load(fs.readFileSync('.github/issue-management.yml', 'utf8'));
            return config;

      - name: Initial Triage
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const config = steps.config.outputs.result;
            const issue = context.payload.issue;
            
            // Auto-labeling
            const title = issue.title.toLowerCase();
            if (title.includes('bug') || title.includes('error') || title.includes('crash')) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['type: bug', 'triage']
              });
            }
            
            // Add to project board
            await github.rest.projects.createCard({
              column_id: config.project_board.columns.triage.id,
              content_id: issue.id,
              content_type: 'Issue'
            });
            
            // Post welcome message
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: config.templates.welcome
            });

  update_metrics:
    name: Update Metrics
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Calculate Metrics
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const now = new Date();
            const thirtyDaysAgo = new Date(now - 30 * 24 * 60 * 60 * 1000);
            
            // Collect metrics
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              since: thirtyDaysAgo.toISOString()
            });
            
            const metrics = {
              total: issues.data.length,
              open: issues.data.filter(i => i.state === 'open').length,
              closed: issues.data.filter(i => i.state === 'closed').length,
              bugs: issues.data.filter(i => i.labels.some(l => l.name === 'type: bug')).length,
              features: issues.data.filter(i => i.labels.some(l => l.name === 'type: enhancement')).length,
              avgTimeToClose: 0
            };
            
            // Calculate average time to close
            const closedIssues = issues.data.filter(i => i.state === 'closed');
            if (closedIssues.length > 0) {
              const totalTime = closedIssues.reduce((acc, issue) => {
                return acc + (new Date(issue.closed_at) - new Date(issue.created_at));
              }, 0);
              metrics.avgTimeToClose = totalTime / closedIssues.length / (1000 * 60 * 60); // in hours
            }
            
            // Update status issue
            const update = `## Issue Management Dashboard
            
            ### 📊 30-Day Metrics
            - Total Issues: ${metrics.total}
            - Currently Open: ${metrics.open}
            - Recently Closed: ${metrics.closed}
            - Bug Reports: ${metrics.bugs}
            - Feature Requests: ${metrics.features}
            - Avg Time to Close: ${metrics.avgTimeToClose.toFixed(1)}h
            
            ### 🎯 SLA Status
            - Response Time: ${metrics.avgTimeToClose < 48 ? '✅' : '⚠️'}
            - Bug Resolution: ${(metrics.closed / metrics.total * 100).toFixed(1)}%
            
            Last updated: ${now.toISOString()}`;
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: 81,
              body: update
            });

  check_stale:
    name: Check Stale Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Mark Stale Issues
        uses: actions/stale@v8
        with:
          repo-token: ${{ secrets.PROJECT_PAT }}
          stale-issue-message: |
            This issue has been automatically marked as stale because it has not had recent activity.
            
            If this issue is still relevant, please:
            - Add a comment with current status
            - Add more details if available
            - Update labels if needed
            
            Otherwise, it will be closed in 7 days.
          days-before-stale: 60
          days-before-close: 7
          stale-issue-label: 'status: stale'
          exempt-issue-labels: 'status: evergreen,type: security'

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
      - name: Check Priority
        id: priority
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const issue = context.payload.issue;
            const isCritical = issue.labels.some(l => 
              l.name === 'priority: critical' || 
              l.name === 'type: security'
            );
            return { isCritical };

      - name: Notify Critical Issues
        if: steps.priority.outputs.result.isCritical
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'superpassword-issues'
          slack-message: |
            🚨 *Critical Issue Created*
            Issue: ${{ github.event.issue.title }}
            Link: ${{ github.event.issue.html_url }}
            
            Please review ASAP according to SLA guidelines.
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
