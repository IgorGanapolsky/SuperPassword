name: 🎯 PR Orchestration

on:
  pull_request:
    types: [opened, reopened, synchronize, edited, ready_for_review]
  pull_request_review:
    types: [submitted, dismissed]
  check_suite:
    types: [completed]
  workflow_dispatch:

jobs:
  orchestrate:
    name: Orchestrate PRs
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
      checks: write
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Analyze PR State
        id: analyze
        uses: actions/github-script@v7
        with:
          script: |
            // PR Sequence (ordered by dependencies)
            const PR_SEQUENCE = {
              'feat/2025-standards-setup': 1,
              'chore/update-eas-workflow': 2,
              'chore/add-security-workflow': 3,
              'feat/autonomous-orchestration': 4,
              'chore/enhance-pr-monitoring': 5,
              'feat/add-modern-badges': 6
            };
            
            // Get all open PRs
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              direction: 'asc'
            });
            
            // Process each PR
            for (const pr of prs.data) {
              const branch = pr.head.ref;
              const sequence = PR_SEQUENCE[branch] || 999;
              
              // Check if any earlier PRs in sequence are still open
              const blockers = prs.data
                .filter(other => PR_SEQUENCE[other.head.ref] < sequence)
                .map(other => `#${other.number}`);
              
              if (blockers.length > 0) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: `⏳ This PR is waiting for: ${blockers.join(', ')}`
                });
                continue;
              }
              
              // Check PR status
              const checks = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });
              
              const reviews = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              
              const isApproved = reviews.data.some(r => r.state === 'APPROVED');
              const checksPass = checks.data.check_runs.every(c => c.conclusion === 'success');
              
              if (checksPass && isApproved) {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  merge_method: 'squash'
                });
              }
            }
            
      - name: Update Badges
        if: always()
        run: |
          # Update README badges
          sed -i '1i\[![Build Status](https://github.com/IgorGanapolsky/SuperPassword/actions/workflows/eas-build.yml/badge.svg)](https://github.com/IgorGanapolsky/SuperPassword/actions/workflows/eas-build.yml)\n[![Code Quality](https://sonarcloud.io/api/project_badges/measure?project=IgorGanapolsky_SuperPassword&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=IgorGanapolsky_SuperPassword)\n[![Security](https://img.shields.io/badge/secured_by-gitguardian-blue)](https://www.gitguardian.com)\n[![PR Status](https://img.shields.io/github/issues-pr/IgorGanapolsky/SuperPassword)](https://github.com/IgorGanapolsky/SuperPassword/pulls)\n' README.md
          
          # Commit and push if changed
          if git diff --quiet README.md; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add README.md
            git commit -m "docs: Update badges [skip ci]"
            git push
          fi
      
      - name: Update PR Status Board
        if: always()
        run: |
          # Create or update status board issue
          gh issue create --title "🎯 PR Status Board" --body "## Current PR Status
          
          $(gh pr list --json number,title,headRefName,mergeStateStatus --template '
          {{range .}}### #{{.number}}: {{.title}}
          - Branch: `{{.headRefName}}`
          - Status: {{.mergeStateStatus}}
          {{end}}
          
          Last updated: $(date -u)
          ')" --label "status" || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
