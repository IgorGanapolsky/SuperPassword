name: 🤖 PR Orchestration

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  schedule:
    - cron: "*/15 * * * *"  # Run every 15 minutes
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write

jobs:
  orchestrate:
    name: 🎯 Orchestrate PRs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Analyze PR State
        id: analyze
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              sort: "updated",
              direction: "desc"
            });

            const prData = await Promise.all(prs.map(async pr => {
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });

              const { data: checks } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });

              return {
                number: pr.number,
                title: pr.title,
                baseBranch: pr.base.ref,
                headBranch: pr.head.ref,
                draft: pr.draft,
                mergeable: pr.mergeable,
                hasConflicts: pr.mergeable_state === "dirty",
                reviews: reviews.map(r => ({ state: r.state, user: r.user.login })),
                checks: checks.check_runs.map(c => ({ name: c.name, conclusion: c.conclusion }))
              };
            }));

            core.setOutput("prs", JSON.stringify(prData));

      - name: Handle Conflicts
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          script: |
            const prs = JSON.parse(process.env.PRS);
            
            for (const pr of prs) {
              if (pr.hasConflicts) {
                console.log(`PR #${pr.number} has conflicts - attempting resolution`);
                
                // Fetch latest changes
                await exec.exec("git", ["fetch", "origin"]);
                await exec.exec("git", ["checkout", pr.headBranch]);
                
                try {
                  // Try to merge base branch
                  await exec.exec("git", ["merge", pr.baseBranch]);
                  
                  // Push changes if successful
                  await exec.exec("git", ["push", "origin", pr.headBranch]);
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: "✅ Conflicts resolved automatically"
                  });
                } catch (error) {
                  console.log(`Could not auto-resolve conflicts: ${error}`);
                  
                  // Create conflict resolution guide
                  const guide = `## Conflict Resolution Needed
                  
                  This PR has conflicts that need manual resolution. Here's how to fix them:
                  
                  \`\`\`bash
                  git checkout ${pr.headBranch}
                  git pull origin ${pr.headBranch}
                  git merge ${pr.baseBranch}
                  # Resolve conflicts in your editor
                  git add .
                  git commit -m "chore: resolve merge conflicts"
                  git push origin ${pr.headBranch}
                  \`\`\`
                  
                  Or use GitHub's web editor to resolve conflicts.`;
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: guide
                  });
                }
              }
            }
        env:
          PRS: ${{ steps.analyze.outputs.prs }}

      - name: Process PRs
        uses: actions/github-script@v7
        with:
          script: |
            const prs = JSON.parse(process.env.PRS);
            
            for (const pr of prs) {
              console.log(`Processing PR #${pr.number}: ${pr.title}`);

              // Skip if PR has conflicts
              if (pr.hasConflicts) {
                console.log("PR has conflicts - skipping");
                continue;
              }

              // Skip if PR is a draft
              if (pr.draft) {
                console.log("PR is draft - skipping");
                continue;
              }

              // Check CI status
              const failingChecks = pr.checks.filter(c => c.conclusion === "failure");
              if (failingChecks.length > 0) {
                console.log("CI checks failing - skipping");
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: `❌ CI checks failing:
${failingChecks.map(c => `- ${c.name}`).join("
")}`
                });
                continue;
              }

              // Check reviews
              const approvals = pr.reviews.filter(r => r.state === "APPROVED").length;
              if (approvals < 1) {
                console.log("Needs review - requesting");
                await github.rest.pulls.requestReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  reviewers: ["IgorGanapolsky"]
                });
                continue;
              }

              // All checks passed - merge PR
              if (pr.mergeable) {
                console.log("All checks passed - merging");
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  merge_method: "squash"
                });
              }
            }
        env:
          PRS: ${{ steps.analyze.outputs.prs }}

  update-status:
    name: 📊 Update Status
    needs: orchestrate
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Update Status Board
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: "status-board"
            });

            const statusBoard = issues[0] || await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "📊 PR Status Board",
              labels: ["status-board"],
              body: "Initializing status board..."
            });

            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open"
            });

            const statusEmoji = {
              draft: "📝",
              blocked: "⏳",
              failed: "❌",
              conflicts: "⚠️",
              ready: "✅"
            };

            const prStatus = await Promise.all(prs.map(async pr => {
              const { data: checks } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });

              let status = pr.draft ? "draft" :
                          pr.mergeable_state === "dirty" ? "conflicts" :
                          checks.check_runs.some(c => c.conclusion === "failure") ? "failed" :
                          "ready";

              return `${statusEmoji[status]} #${pr.number} ${pr.title}`;
            }));

            const body = `# 📊 PR Status Board
Last updated: ${new Date().toISOString()}

## Open PRs
${prStatus.join("
")}

## Recent Activity
${prs.slice(0, 5).map(pr => `- ${pr.updated_at}: ${pr.title}`).join("
")}`;

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: statusBoard.number,
              body
            });
